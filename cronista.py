# cronista.py (Versi√≥n Final con Nombres de Emergencia y Detecci√≥n de T√≠tulos)

import json
import random
import google.generativeai as genai
from config import GEMINI_API_KEY
import re
from datetime import datetime, timedelta # <-- ¬°AQU√ç EST√Å LA SOLUCI√ìN!


# --- INICIALIZACI√ìN DEL MODELO DE IA ---
gemini_model = None
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel('gemini-1.5-flash')
        print("INFO: Modelo de IA Gemini configurado correctamente.")
    except Exception as e:
        print(f"ADVERTENCIA: No se pudo configurar la API de Gemini. Error: {e}")
else:
    print("ADVERTENCIA: No se encontr√≥ GEMINI_API_KEY. Las cr√≥nicas no se generar√°n.")




# REEMPLAZA ESTA FUNCI√ìN en tu archivo cronista.py

# Aseg√∫rate de que tienes 'import json' al principio de tu archivo cronista.py
import json

# ... (resto de tus importaciones y la configuraci√≥n de gemini_model) ...

def generar_cronica(perfil_manager, datos_actuales, nombre_rival="Nadie en particular"):
    """
    Genera una cr√≥nica personalizada para un m√°nager, usando un perfil enriquecido
    y AHORA tambi√©n sus √∫ltimas declaraciones de Telegram.
    """
    if not gemini_model: 
        return "El cronista est√° af√≥nico hoy. No hay cr√≥nica."

    # --- INICIO DE LA MODIFICACI√ìN: LEER DECLARACIONES.JSON ---
    
    ultima_declaracion = "Este m√°nager ha optado por un prudente silencio esta semana."
    telegram_user_id = perfil_manager.get("telegram_user_id")

    if telegram_user_id:
        try:
            with open('declaraciones.json', 'r', encoding='utf-8') as f:
                declaraciones = json.load(f)
            
            # Buscamos la √∫ltima declaraci√≥n de este usuario espec√≠fico recorriendo la lista al rev√©s
            for declaracion in reversed(declaraciones):
                if declaracion.get("telegram_user_id") == telegram_user_id:
                    ultima_declaracion = declaracion["declaracion"]
                    break
        except (FileNotFoundError, json.JSONDecodeError):
            # Si el archivo no existe o est√° vac√≠o, no hacemos nada y usamos el mensaje por defecto.
            pass
            
    # --- FIN DE LA MODIFICACI√ìN ---

    nombre_mister = perfil_manager.get('nombre_mister', 'M√°nager Desconocido')
    
    num_titulos = nombre_mister.count('üèÜ')
    contexto_titulos = f"Tiene {num_titulos} t√≠tulos en su palmar√©s." if num_titulos > 0 else "A√∫n no ha ganado ning√∫n t√≠tulo."

    estilo = perfil_manager.get('estilo_juego') or "No definido"
    fetiche = perfil_manager.get('jugador_fetiche') or "No tiene"
    fichajes = perfil_manager.get('filosofia_fichajes') or "Impredecible"

    # --- INICIO DE LA MODIFICACI√ìN: PROMPT MEJORADO ---

    prompt = f"""
    Act√∫a como un cronista deportivo legendario, ingenioso y con memoria (estilo Maldini o Axel Torres). Tienes acceso a todo: datos, perfiles y las declaraciones del vestuario (el chat de la liga).
    
    Aqu√≠ tienes la ficha completa del m√°nager sobre el que vas a comentar:
    - Nombre: {nombre_mister}
    - Palmar√©s: {contexto_titulos}
    - Lema: {perfil_manager.get('apodo_lema') or "Sin lema conocido"}
    - Su Estilo de Juego: {estilo}
    - Su Jugador Fetiche: {fetiche}
    - Su Filosof√≠a de Fichajes: {fichajes}
    - Su Rival Hist√≥rico: {nombre_rival}
    - Momento de Gloria recordado: {perfil_manager.get('momento_gloria') or "A√∫n por llegar"}
    - Peor Desastre recordado: {perfil_manager.get('peor_desastre') or "Prefiere no recordarlo"}

    Datos de esta jornada:
    - Puntos conseguidos: {datos_actuales.get('puntos_jornada', 0)}
    - Posici√≥n actual en la liga: {datos_actuales.get('puesto', 'N/A')}

    DECLARACI√ìN M√ÅS RECIENTE DEL M√ÅNAGER (obtenida del chat de la liga):
    - "{ultima_declaracion}"

    Misi√≥n: Escribe un comentario breve y punzante (2-3 frases) sobre su rendimiento.
    Debes CONECTAR OBLIGATORIAMENTE los datos de la jornada con alg√∫n dato de su ficha personal O, preferiblemente, con su √∫ltima declaraci√≥n.
    - Si su declaraci√≥n fue arrogante y pinch√≥, res√°ltalo. ("Sus palabras promet√≠an un hurac√°n, pero en el campo solo vimos una llovizna de 40 puntos").
    - Si se quej√≥ de un jugador y ese jugador le dio puntos, s√© ir√≥nico. ("Parece que el 'paquete' del que hablaba s√≠ sab√≠a c√≥mo encontrar la red").
    - Si su filosof√≠a es "tirar de cartera" y en el chat dijo que "el dinero no da la felicidad", pero gan√≥, comenta la iron√≠a.
    S√© creativo, espec√≠fico y memorable.
    """
    
    # --- FIN DE LA MODIFICACI√ìN ---

    try:
        response = gemini_model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"Error al generar cr√≥nica para {nombre_mister}: {e}")
        return "El cronista se ha quedado sin palabras por alguna raz√≥n..."


def generar_nombre_equipo_ia_thread(perfiles_equipo, resultado_queue):
    """
    Genera el nombre del equipo. Si la IA falla, crea un nombre de emergencia √∫nico.
    Ahora tambi√©n informa a la IA sobre los t√≠tulos de los m√°nagers.
    """
    if not gemini_model:
        nombre, justificacion = crear_nombre_emergencia(perfiles_equipo)
        resultado_queue.put({"nombre_equipo": nombre, "justificacion": justificacion})
        return

    descripcion_miembros = ""
    titulos_totales = 0
    for i, perfil in enumerate(perfiles_equipo):
        nombre = perfil.get('nombre_mister', 'M√°nager Desconocido')
        num_titulos = nombre.count('üèÜ')
        titulos_totales += num_titulos
        
        descripcion_miembros += (
            f"\n--- Perfil del M√°nager {i+1} ---\n"
            f"Nombre: {nombre} (Ha ganado {num_titulos} t√≠tulos)\n"
            f"Lema: {perfil.get('apodo_lema', 'Sin apodo')}\n"
            f"Momento de Gloria: {perfil.get('momento_gloria', 'A√∫n por llegar')}\n"
            f"Peor Desastre: {perfil.get('peor_desastre', 'Ninguno conocido')}\n"
        )

    contexto_titulos_equipo = f"En total, este equipo acumula {titulos_totales} t√≠tulos entre sus miembros."

    prompt = f"""
    Act√∫a como un experto en marketing deportivo y un periodista creativo. Tu tarea es bautizar a un nuevo equipo de una liga fantasy.
    
    A continuaci√≥n, te doy los perfiles de los m√°nagers que forman este equipo.
    {descripcion_miembros}
    
    {contexto_titulos_equipo}
    Analiza sus perfiles, nombres y, sobre todo, su palmar√©s combinado. Bas√°ndote en la combinaci√≥n de sus caracter√≠sticas, crea un nombre de equipo que sea ingenioso, potente o divertido y que haga referencia a su experiencia (o a la falta de ella).
    
    Tu respuesta DEBE ser √∫nicamente un objeto JSON con el siguiente formato:
    {{
      "nombre_equipo": "El Nombre Que Inventes",
      "justificacion": "Una explicaci√≥n breve y creativa de por qu√© elegiste ese nombre, conectando las caracter√≠sticas y los t√≠tulos de los m√°nagers."
    }}
    """
    
    print("    -> Pidiendo a la IA que bautice a este equipo... (hilo en ejecuci√≥n)")
    try:
        response = gemini_model.generate_content(prompt)
        clean_response = response.text.strip().replace("```json", "").replace("```", "")
        ai_json = json.loads(clean_response)
        resultado_queue.put(ai_json)
    except Exception as e:
        print(f"    -> ERROR en el hilo de la IA: {e}")
        nombre, justificacion = crear_nombre_emergencia(perfiles_equipo)
        resultado_queue.put({"nombre_equipo": nombre, "justificacion": justificacion})


def crear_nombre_emergencia(perfiles):
    """
    Crea un nombre de equipo √∫nico combinando los nombres de los m√°nagers.
    """
    nombres = []
    for perfil in perfiles:
        primer_nombre = perfil.get('nombre_mister', 'Manager').split()[0]
        # Limpiamos el nombre de posibles emojis para que sea m√°s legible
        nombre_limpio = ''.join(c for c in primer_nombre if c.isalnum())
        nombres.append(nombre_limpio if nombre_limpio else "M√≠ster")
    
    nombre_base = " y ".join(nombres)
    sufijo = random.choice(["United", "FC", "Team", "CF", "Racing"])
    
    nombre_final = f"{nombre_base} {sufijo}"
    justificacion = "El cronista estaba af√≥nico, as√≠ que los m√°nagers fundaron su propio club de emergencia."
    
    return nombre_final, justificacion
# Pega esto al final de tu archivo cronista.py

## --- NUEVA FUNCI√ìN PARA COMENTAR PREMIOS --- ##
def generar_comentario_premio(nombre_premio, ganadores, jornada_actual, es_final):
    """
    Genera un comentario del cronista sobre un premio espec√≠fico y sus ganadores.

    Args:
        nombre_premio (str): El nombre del premio (e.g., "Pareja de Oro").
        ganadores (list): Una lista con los nombres de los m√°nagers ganadores.
        jornada_actual (int): La jornada actual de la liga.
        es_final (bool): True si el premio es definitivo (fin de liga o sprint).
    """
    global gemini_model # Es buena pr√°ctica asegurarse de que la variable global est√° accesible
    if not gemini_model:
        return "El cronista guarda silencio, impresionado por la haza√±a."

    # Adaptar el tono si el premio es definitivo o provisional
    contexto_temporal = "Este es el veredicto final. ¬°Ya no hay vuelta atr√°s!" if es_final else f"En la jornada {jornada_actual}, esta es la situaci√≥n, pero todo puede cambiar."
    
    # Formatear la lista de ganadores para el prompt
    nombres_ganadores = " y ".join(ganadores)

    prompt = f"""
    Act√∫a como un cronista deportivo legendario, analizando el cuadro de honor de una liga fantasy.
    
    Premio en disputa: "{nombre_premio}"
    Ganador(es) actuales: {nombres_ganadores}
    Contexto: {contexto_temporal}

    Escribe un comentario muy breve (1-2 frases ingeniosas) sobre este logro. 
    - Si es un premio final, habla de su legado, de c√≥mo ser√°n recordados. S√© √©pico o sarc√°stico.
    - Si es provisional, comenta sobre si podr√°n mantener la posici√≥n, la presi√≥n que sienten o si es un espejismo.
    
    S√© directo y memorable.
    """
    try:
        response = gemini_model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"Error al generar comentario para el premio {nombre_premio}: {e}")
        return f"El cronista se ha quedado sin palabras ante el logro de {nombres_ganadores}."
# Pega estas dos nuevas funciones al final de tu archivo cronista.py

def generar_comentario_parejas(clasificacion):
    """
    Genera un comentario analizando la clasificaci√≥n por parejas.
    Recibe la lista completa de la clasificaci√≥n.
    """
    global gemini_model
    if not gemini_model or not clasificacion:
        return "El cronista est√° estudiando las sinergias de los equipos."

    # Preparamos los datos del top 3 para la IA
    top_parejas_texto = ""
    for i, pareja in enumerate(clasificacion[:3]): # Tomamos el top 3
        nombre = pareja.get('nombre', 'Pareja Desconocida')
        media = pareja.get('media', 0)
        top_parejas_texto += f"- Posici√≥n {i+1}: {nombre} (Media: {media} pts)\n"

    prompt = f"""
    Act√∫a como un analista deportivo experto en qu√≠mica de equipo y estrategia, como si fueras Axel Torres.
    Te proporciono el top 3 de la clasificaci√≥n por parejas de una liga fantasy.

    Clasificaci√≥n actual:
    {top_parejas_texto}

    Analiza la situaci√≥n. Tu comentario debe ser breve (2-3 frases) y con car√°cter.
    - Si la diferencia de puntos entre el primero y el segundo es peque√±a, habla de la intensa rivalidad y la tensi√≥n.
    - Si el l√≠der tiene una gran ventaja, comenta sobre su aplastante dominio y si alguien podr√° alcanzarles.
    - Menciona por su nombre al menos a los dos primeros equipos.
    """
    try:
        response = gemini_model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"Error al generar comentario de parejas: {e}")
        return "Una alianza poderosa se est√° forjando, pero el cronista a√∫n no descifra cu√°l."

# REEMPLAZA ESTA FUNCI√ìN EN cronista.py

def generar_comentario_sprint(nombre_sprint, clasificacion, jornada_actual, inicio_sprint, fin_sprint):
    """
    Genera un comentario analizando la clasificaci√≥n de un sprint.
    Ahora es consciente del progreso del sprint.
    """
    global gemini_model
    if not gemini_model or not clasificacion:
        return "El cronista est√° tomando tiempos para ver qui√©n es el m√°s r√°pido."

    # Determinar el estado del sprint
    if jornada_actual >= fin_sprint:
        estado_sprint = f"Ha finalizado en la jornada {jornada_actual}. ¬°Este es el resultado definitivo!"
    elif jornada_actual == inicio_sprint:
        estado_sprint = f"Acaba de comenzar en la jornada {jornada_actual}. ¬°Se apaga el sem√°foro!"
    else:
        estado_sprint = f"Est√° en curso en la jornada {jornada_actual} de un total de {fin_sprint - inicio_sprint + 1} jornadas."

    top_managers_texto = ""
    for i, manager in enumerate(clasificacion[:3]):
        nombre = manager.get('nombre', 'M√°nager Desconocido')
        puntos = manager.get('puntos', 0)
        top_managers_texto += f"- Posici√≥n {i+1}: {nombre} ({puntos} pts)\n"

    prompt = f"""
    Act√∫a como un comentarista de F√≥rmula 1, analizando una carrera corta (un sprint). Eres r√°pido, incisivo y te fijas en el estado de forma.
    Te proporciono el top 3 de la clasificaci√≥n del sprint "{nombre_sprint}".

    Estado del Sprint: {estado_sprint}

    Clasificaci√≥n actual del Sprint:
    {top_managers_texto}

    Genera un comentario de 2 frases sobre la situaci√≥n:
    - Si acaba de empezar, habla de qui√©n ha salido mejor y qui√©nes son los primeros l√≠deres.
    - Si est√° en curso, analiza qui√©n mantiene el ritmo y si hay posibles remontadas.
    - Si ha finalizado, felicita al ganador y comenta sobre su rendimiento en este tramo.
    S√© siempre consciente del contexto (si ha terminado o no) para no dar un veredicto final antes de tiempo.
    """
    try:
        response = gemini_model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"Error al generar comentario de sprint: {e}")
        return "Los m√°nagers aprietan el acelerador, pero el cronista a√∫n no tiene claro qui√©n ganar√° la carrera."

# En cronista.py

# --- LISTA DE PALABRAS CLAVE (EL "RADAR DEL SALSEO") ---
# Esta lista es fundamental. Puedes y debes ampliarla con el tiempo.
# Incluye abreviaturas, jerga, etc.

def generar_introduccion_semanal(perfiles, jornada_actual):
    """
    Genera una introducci√≥n narrativa para el reporte semanal, buscando
    la declaraci√≥n m√°s relevante y pidiendo a la IA que la comente.
    """
    if not gemini_model:
        return "" # Si no hay IA, no hay introducci√≥n.

    # --- 1. FILTRADO DE DECLARACIONES POR FECHA Y RELEVANCIA ---
    
    declaraciones_relevantes = []
    fecha_limite = datetime.now() - timedelta(days=7)

    try:
        with open('declaraciones.json', 'r', encoding='utf-8') as f:
            todas_las_declaraciones = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        # Si no hay declaraciones, no podemos generar introducci√≥n
        return "## üéôÔ∏è El Vestuario Habla\n\n_Semana de reflexi√≥n en la liga. Silencio en los banquillos a la espera de la pr√≥xima batalla._\n"

    for declaracion in todas_las_declaraciones:
        fecha_declaracion = datetime.fromisoformat(declaracion['timestamp'])
        if fecha_declaracion > fecha_limite:
            # Comprobamos si la declaraci√≥n contiene alguna de nuestras palabras clave
            texto_declaracion = declaracion.get('declaracion', '').lower()
            if any(palabra in texto_declaracion for palabra in PALABRAS_CLAVE_INTERES):
                declaraciones_relevantes.append(declaracion)

    if not declaraciones_relevantes:
        return "## üéôÔ∏è El Vestuario Habla\n\n_Semana de reflexi√≥n en la liga. Silencio en los banquillos a la espera de la pr√≥xima batalla._\n"

    # --- 2. PREPARACI√ìN DE LA TRANSCRIPCI√ìN PARA LA IA ---
    
    transcripcion = ""
    for d in declaraciones_relevantes:
        transcripcion += f"- {d['nombre_mister']}: \"{d['declaracion']}\"\n"

    # --- 3. CONSTRUCCI√ìN DEL PROMPT PARA LA IA "EDITOR JEFE" ---

    # Buscamos datos clave de la jornada (ej. el l√≠der)
    lider_actual = sorted(perfiles, key=lambda p: p['historial_temporada'][-1]['puesto'])[0]
    
    prompt = f"""
    Eres el Editor Jefe de un programa deportivo sobre una liga fantasy, conocido por tu estilo dram√°tico y agudo.
    Tu misi√≥n es escribir una introducci√≥n impactante para el reporte de la Jornada {jornada_actual}.

    A continuaci√≥n, te presento un resumen de las declaraciones m√°s "calientes" del chat de la liga esta semana:
    ---
    {transcripcion}
    ---

    Dato clave de la jornada: El l√≠der actual es {lider_actual['nombre_mister']}.

    Bas√°ndote EXCLUSIVAMENTE en las declaraciones proporcionadas y en el dato del l√≠der, realiza estas dos tareas:
    1.  **Escribe un T√çTULO DE LA JORNADA:** Una frase corta, potente y period√≠stica que capture la esencia de la semana.
    2.  **Escribe un P√ÅRRAFO DE AN√ÅLISIS:** Comenta la declaraci√≥n o el cruce de declaraciones m√°s significativo. Explica la pol√©mica, la bravuconada o la queja m√°s interesante y con√©ctala si es posible con el l√≠der actual o alg√∫n evento importante.

    Tu respuesta debe tener el siguiente formato exacto:
    T√çTULO: [Tu t√≠tulo aqu√≠]
    AN√ÅLISIS: [Tu p√°rrafo de an√°lisis aqu√≠]
    """

    prompt = f"""..."""

    # --- !! L√çNEA DE PRUEBA TEMPORAL !! ---
    # Descomenta esta l√≠nea para saltarte la llamada a la IA y probar la integraci√≥n
    # Com√©ntala de nuevo cuando la API vuelva a funcionar.
    # print("INFO: [MODO PRUEBA] Saltando llamada a la IA y devolviendo texto falso.")
    # return "## üéôÔ∏è LA T√ÅCTICA DE LA BERENJENA\n\n_El mercado de fichajes se ha visto sacudido por la audaz declaraci√≥n de Iv√°n sobre su 'berenjena voladora'. ¬øGenialidad o locura? Solo los puntos del fin de semana dictar√°n sentencia._\n"
    # --- FIN DE LA L√çNEA DE PRUEBA ---
    try:
        print(" -> Generando introducci√≥n de la IA...")
        response = gemini_model.generate_content(prompt)
        
        # Procesamos la respuesta de la IA para separarla en t√≠tulo y an√°lisis
        titulo = "El Vestuario Habla"
        analisis = response.text # Valor por defecto

        match_titulo = re.search(r"T√çTULO: (.*)", response.text, re.IGNORECASE)
        match_analisis = re.search(r"AN√ÅLISIS: (.*)", response.text, re.IGNORECASE | re.DOTALL)

        if match_titulo:
            titulo = match_titulo.group(1).strip()
        if match_analisis:
            analisis = match_analisis.group(1).strip()

        # Devolvemos el texto formateado en Markdown
        return f"## üéôÔ∏è {titulo}\n\n_{analisis}_\n"
        
    except Exception as e:
        print(f"Error al generar la introducci√≥n de la IA: {e}")
        return "" # Si falla, no a√±adimos nada al reporte
    
# --- BLOQUE DE PRUEBA UNITARIA ---
# Este c√≥digo solo se ejecuta si lanzamos este archivo directamente
""" if __name__ == '__main__':
    print("--- INICIANDO PRUEBA UNITARIA DE LA INTRODUCCI√ìN ---")
    
    # 1. Cargamos las claves desde el .env (necesario para la IA)
    from dotenv import load_dotenv
    load_dotenv()
    
    # 2. Simulamos los datos que recibir√≠a la funci√≥n
    #    Cargamos los perfiles reales para que la prueba sea realista
    try:
        with open('perfiles.json', 'r', encoding='utf-8') as f:
            perfiles_de_prueba = json.load(f)
        jornada_de_prueba = 4 # Pon un n√∫mero de jornada cualquiera
        
        # 3. Llamamos a la funci√≥n que queremos probar
        introduccion = generar_introduccion_semanal(perfiles_de_prueba, jornada_de_prueba)
        
        # 4. Imprimimos el resultado
        print("\n--- RESULTADO GENERADO ---\n")
        print(introduccion)
        print("\n--- FIN DE LA PRUEBA ---")

    except FileNotFoundError:
        print("ERROR: Para probar, aseg√∫rate de que 'perfiles.json' y 'declaraciones.json' existen en esta carpeta.")
    except Exception as e:
        print(f"La prueba ha fallado con un error: {e}") """